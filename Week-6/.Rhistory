a <- 7:!1
b <- 8:12
out <-a + b
out
# Taking advantage of vectorization
a <- 7:11
b <- 8:12
out <- a + b
out
# Slide 23
sample_sizes <- c(5,10,15,20,25000)
sample_summary <- function(sample_sizes, fun) {
out <- vector("double", length(sample_sizes))
for(i in seq_along(sample_sizes)){
out [i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes_sizes,mean)
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Slide 23
#initialise a vector with the size of 5 different samples
sample_sizes <- c(5,10,15,20,25000)
#create a functional-function inside a function
sample_summary <- function(sample_sizes, fun) {
#initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
#run the for loop for as long as the length of sample_sizes
for(i in seq_along(sample_sizes)){
#perform operations indicated fun
out [i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
# Right-hand side code: while loop
for (i in seq_along(x)) {
}
i <- 1
while(i <= length(x)) {
i <- i +1
}
# Left-hand side code: for loop
for(i in 1:5) {
print(i)
}
# Right-hand side code: while loop
i <- 1
while(i <= 5) {
i <- i +1
}
# Right-hand side code: while loop
i <- 1
while(i <= 5) {
print(i)
i <- i +1
}
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i])))
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[[i]))
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[[i]]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
i <- 10
while( i =>10) {
# Enter code here
i <- 10
while( i >=10) {
print(i)
i <- i -1
}
# Enter code here
i <- 10
while( i >=10) {
print(i)
i <- i - 1
}
# Enter code here
i <- 10
while( i >= 10) {
print(i)
i <- i - 1
}
# Enter code here
i <- 10
while( i <= 10) {
print(i)
i <- i - 1
}
# Enter code here
i <- 10
while( i => 1) {
# Enter code here
i <- 10
while( i <= 10, i > 0) {
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
cat("Blastoff!")
knitr::include_graphics("images/countdown.png")
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
cat("Blastoff!")
#knitr::include_graphics("images/countdown.png")
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!")
#{r, out.height= "20px",out.width= "200px",echo=FALSE}
#knitr::include_graphics("images/countdown.png")
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!")
{r, out.height= "20px",out.width= "200px",echo=FALSE}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!")
(launch.jpg) {r out.height="20px", out.width="200px"}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
# Enter code here
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
# Enter code here
rocket_countdown <- function() {
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!\n")
cat("Rocket launched!\n")
knitr::include_graphics("launch.jpg")
}
# Enter code here
rocket_countdown <- function() {
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!\n")
cat("Rocket launched!\n")
knitr::include_graphics("launch.jpg",out.width="50%", out.height="auto") # how to adjust the size of the image
}
rocket_countdown()
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Enter code here
library(tidyverse)
for (x in c(3, 6, 9)) {
print(x)
}
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[[i]]))
}
return(out)
}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
vector <- c(TRUE, FALSE)
vector2 <- vector*2
typeof(vector2)
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- vector*2
typeof(vector2)
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- c(2,3)
typeof(vector2)
typeof(vector2)
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- c(2,3)
typeof(vector2)
vector3 <- vector*vector2
typeof(vector3)
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- c(2,3)
typeof(vector2)
vector3 <- vector*vector2
typeof(vector3)
x<-c(1,"4",7,10.00,6L)
typeof(x)
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- c(2,3)
typeof(vector2)
vector3 <- vector*vector2
typeof(vector3)
x<-c(1,"4",7,10.00,6L)
typeof(x)
y <- c(6L)
typeof(y)
x <- (TRUE)
x <- function(name) {
print(paste0("Hello ", name, "!"))
}
x('Kashif')
x <- (TRUE)
x <- function(name) {
print(paste0("Hello ", name, "!"))
}
x('Kashif')
typeof(x)
x <- (2)
x <- function() {
x+2
}
x(3)
x <- (2)
x <- function() {
return(x+2)
}
x(3)
x <- (2)
add <- function() {
return(x+2)
}
add(3)
x <- (2)
add <- function() {
return(x+2)
}
add(x=3)
x <- (2)
add <- function() {
return(x+2)
}
add(x=3)
z <- 1
sprintf("The value assigned to z outside the function is %d",z)
foo <- function(z = 2) {
#reassigning z; z is overridden
z <- 3
return(z+3)
}
foo(z=4)
z <- 1
sprintf("Global variable is %d",z)
foo <- function(z = 2) {
z <- 3
return(z+3)
}
foo(z=4)
#z <- 1
#sprintf("Global variable is %d",z)
#foo <- function(z = 2) {
#z <- 3
#return(z+3)
#}
#foo(z=4)
#create data frame
product_info<-list(ProductID=c(10,20,30),ProductName=c("red", "green", "blue"),Category=c("pencil","pen","eraser"),Price=(1.5,2.5,3.5))
#z <- 1
#sprintf("Global variable is %d",z)
#foo <- function(z = 2) {
#z <- 3
#return(z+3)
#}
#foo(z=4)
#create data frame
product_info<-list(ProductID=c(10,20,30),
ProductName=c("red", "green", "blue"),
Category=c("pencil","pen","eraser"),
Price=(1.5,2.5,3.5)
#z <- 1
#sprintf("Global variable is %d",z)
#foo <- function(z = 2) {
#z <- 3
#return(z+3)
#}
#foo(z=4)
#create data frame
product_info<-list(ProductID=c(10,20,30),
ProductName=c("red", "green", "blue"),
Category=c("pencil","pen","eraser")
Price=(1.5,2.5,3.5)
#z <- 1
#sprintf("Global variable is %d",z)
#foo <- function(z = 2) {
#z <- 3
#return(z+3)
#}
#foo(z=4)
#create data frame
product_info<-list(ProductID=c(10,20,30),
ProductName=c("red", "green", "blue"),
Category=c("pencil","pen","eraser"),
Price=c(1.5,2.5,3.5)
)
setwd("~/Documents/NM2207/quiz")
knitr::opts_chunk$set(echo = TRUE)
gapminder <- read_csv("gapminder.csv")
gapminder <- read_csv("gapminder.csv")
gapminder <- read_csv("gapminder.csv")
glimpse(gapminder)
multiply <- function(value){
function_inside_function<-function(multiplier){
return(multiplier*value)
}
return(function_inside_function(10))
}
Multiply(50)
multiply <- function(value){
function_inside_function<-function(multiplier){
return(multiplier*value)
}
return(function_inside_function(10))
}
multiply(50)
gapminder <- read_csv("gapminder.csv")
glimpse(gapminder)
country_names <- c(Canada, China, US, Netherlands, Singapore)
gapminder <- read_csv("gapminder.csv")
glimpse(gapminder)
country_names <- c("Canada", "China", "US", "Netherlands", "Singapore")
country_name_length <- function (country_names) {
country_name_length <- nchar(country_names),
gapminder <- read_csv("gapminder.csv")
glimpse(gapminder)
country_names <- c("Canada", "China", "US", "Netherlands", "Singapore")
country_name_length <- function (country_names) {
country_name_length <- nchar(country_names)
long_names <- nchar(country_names) > 8
return(long_names)
}
knitr::opts_chunk$set(echo = TRUE)
# Enter code here
rocket_countdown <- function() {
i <- 10
while( i > 0) {
print(i)
i <- i - 1
Sys.sleep(1)
}
cat("Blastoff!\n")
cat("Rocket launched!\n")
knitr::include_graphics("launch.jpg") # how to adjust the size of the image
}
rocket_countdown()
# Enter code here
# Get user input
user_input <- readline(prompt = "Enter a word: ")
# Initialize an index to the last character of the word
index <- nchar(user_input)
# Initialize an empty string to store the reversed word
reversed_word <- ""
# Use a while loop to reverse the characters
while (index > 0) {
reversed_word <- paste(reversed_word, substr(user_input, index, index), sep = "")
index <- index - 1
}
# Print the reversed word
cat("Reversed word:", reversed_word, "\n")
