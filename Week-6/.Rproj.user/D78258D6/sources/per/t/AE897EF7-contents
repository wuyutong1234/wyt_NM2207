---
title: "Week-6: Code-along"
author: "WU YUTONG NM2207: Computational Media Literacy"
date: "`r Sys.Date()`"
output:
  html_document:
  df_print: paged
pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# II. Code to edit and execute using the Code-along-6.Rmd file 
<br>

## A. `for` loop
<br>

### 1. Simple `for` loop (Slide #6)

```{r, eval=TRUE,echo=TRUE}
# Enter code here
library(tidyverse)
for (x in c(3, 6, 9)) {
  print(x)
}
```
<br>

### 2. `for` loops structure (Slide #7)

```{r, eval=TRUE,echo=TRUE}
# Left-hand side code: for loop for passing values
for(x in 1:8) {print(x)}
```
<br>
```{r, eval=TRUE,echo=TRUE}
# Right-hand side code: for loop for passing indices
for (x in 1:8) {y <- seq(from=100, to=200, by=5)
  print(y[x])}
```
<br>

### 3. Example: find sample means (Slide #9)

```{r, eval=TRUE,echo=TRUE}
# Enter code here
sample_sizes <- c(5,10, 15, 20, 25000)
sample_means <- double(length(sample_sizes))

for(i in seq_along(sample_sizes)) {sample_means[[i]] <- mean(rnorm(sample_sizes[[i]]))
}
sample_means
```
<br>

### 4. Alternate ways to pre-allocate space (Slide #12)

```{r, eval=TRUE,echo=TRUE}
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
```
<br>

```{r, eval=TRUE,echo=TRUE}
# Initialisation of data_list
sample_sizes <- c(5, 10, 15, 20, 25000)
sample_means <- rep(0, length(sample_sizes))
for (i in seq_along(sample_sizes)){
  sample_means[[i]] <- mean(rnorm(sample_sizes[[i]]))
}
sample_means
```
<br>

### 5. Review: Vectorized operations (Slide #18)

```{r, eval=TRUE,echo=TRUE}
# Example: bad idea!
a <- 7:11
b <- 8:12
out <- rep(0L, 5)
for (i in seq_along(a)) {
  out[i] <- a[i] + b[i]
}
out
```
<br>

```{r, eval=TRUE,echo=TRUE}
# Taking advantage of vectorization
a <- 7:11
b <- 8:12
out <- a + b
out
```
<br>

## B. Functionals

### 6. `for` loops vs Functionals (Slides #23 and #24)

```{r, eval=TRUE,echo=TRUE}
# Slide 23
# Initialise a vector with the size of 5 different samples
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function 
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes 
for (i in seq_along(sample_sizes)) {
    # Perform operations indicated fun
    out[i] <- fun(rnorm(sample_sizes[[i]]))
  }
return(out) 
}


```
<br>

```{r, eval=TRUE,echo=TRUE}
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
```
```{r, eval=FALSE,echo=TRUE}
vector <- c(TRUE, FALSE)
typeof(vector)
vector2 <- c(2,3)
typeof(vector2)
vector3 <- vector*vector2
typeof(vector3)

x<-c(1,"4",7,10.00,6L)
typeof(x)
y <- c(6L)
typeof(y)


```
```{r, eval=FALSE,echo=TRUE}

#z <- 1
#sprintf("Global variable is %d",z)
#foo <- function(z = 2) {
  #z <- 3
  #return(z+3)
#}
#foo(z=4)

#create data frame 
 product_info<-list(ProductID=c(10,20,30),
                    ProductName=c("red", "green", "blue"),
                    Category=c("electronics","pen","eraser"),
                    Price=c(1.5,2.5,3.5)
                    )

product_info %>%
  select(electronics)

```
<br>

## C. `while` loop

### 7. `while` loop (Slides #27)

```{r, eval=TRUE,echo=TRUE}
# Left-hand side code: for loop
for(i in 1:5) {
  print(i)
}
```
<br>

```{r, eval=TRUE,echo=TRUE}
# Right-hand side code: while loop
i <- 1
while(i <= 5) {
  print(i)
  i <- i +1
}
```
<br>


