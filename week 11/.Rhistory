runApp('age_gender')
shiny::runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
knitr::opts_chunk$set(echo = TRUE)
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +  # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = ASHS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Sleep hygiene", y = "Insomnia severity") +  # Label axes
ggtitle("Sleep hygiene against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = ASHS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Sleep hygiene", y = "Insomnia severity") +  # Label axes
ggtitle("Sleep hygiene against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = FIRST_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Predisposition to insomnia", y = "Insomnia severity") +  # Label axes
ggtitle("Predisposition to insomnia against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = ASHS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Sleep hygiene", y = "Insomnia severity") +  # Label axes
ggtitle("Sleep hygiene against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = FIRST_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Predisposition to insomnia", y = "Insomnia severity") +  # Label axes
ggtitle("Predisposition to insomnia against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = DBAS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Dysfunctional beliefs", y = "Insomnia severity") +  # Label axes
ggtitle("Dysfuntional beliefs towards insomnia against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = BDI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Depression", y = "Insomnia severity") +  # Label axes
ggtitle("Depression against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = ASHS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Sleep hygiene", y = "Insomnia severity") +  # Label axes
ggtitle("Sleep hygiene against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = FIRST_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Predisposition to insomnia", y = "Insomnia severity") +  # Label axes
ggtitle("Predisposition to insomnia against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = DBAS_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Dysfunctional beliefs", y = "Insomnia severity") +  # Label axes
ggtitle("Dysfuntional beliefs towards insomnia against insomnia severity") +  # Add a title
theme_minimal()
ggplot(cleaned_insomnia, aes(x = GCTI_total, y = ISI_total)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") + # Add points
labs(x = "Cognitive intrusiveness", y = "Insomnia severity") +  # Label axes
ggtitle("Cognitive intrusiveness against insomnia severity") +  # Add a title
theme_minimal()
runApp('combined_app')
runApp('combined_app')
runApp('combined_app')
runApp('combined_app')
runApp('combined_app')
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
# Example data frame
data <- data.frame(
FirstName = c("John", "Jane", "Alice"),
LastName = c("Doe", "Smith", "Johnson"),
Age = c(30, 25, 40)
)
# Unite FirstName and LastName into a single column
data <- data %>%
unite(FullName, FirstName, LastName, sep = " ")
# View the updated data frame
print(data)
library(dplyr)
# Example data frame
data <- data.frame(
Age = c(30, 25, 40),
BDI_total = c(10, 5, 15),
ASHS_total = c(20, 25, 30)
)
# Create a new column "causes" to group "sleep hygiene" and "depression"
data <- data %>%
mutate(causes = case_when(
BDI_total > 10 ~ "Depression",
ASHS_total > 25 ~ "Sleep Hygiene",
TRUE ~ "Other"
))
# View the updated data frame
print(data)
cleaned_insomnia$Sex <- factor(cleaned_insomnia$Sex, levels = c(0, 1), labels = c("Female", "Male"))
participants <- cleaned_insomnia %>%
select(Group, SubGroup, Sex, Age)
cleaned_insomnia$Sex <- factor(cleaned_insomnia$Sex, levels = c(0, 1), labels = c("Female", "Male"))
participants <- cleaned_insomnia %>%
select(Sex, Age)
glimpse(participants)
sleep_quality <- cleaned_insomnia %>%
select(ISI_total, PSQI_total)
cleaned_insomnia$Sex <- factor(cleaned_insomnia$Sex, levels = c(0, 1), labels = c("Female", "Male"))
participants <- cleaned_insomnia %>%
select(Sex, Age)
glimpse(participants)
causes <- cleaned_insomnia %>%
select(BDI_total, ASHS_total, DBAS_total, FIRST_total, GCTI_total, ACE_tot)
glimpse(causes)
coping <- cleaned_insomnia %>%
select(cope_disengage_su, cope_growth, cope_disengage_mental, cope_emotions, cope_socialsupp_instr, cope_active, cope_denial, cope_religion, cope_humor, cope_disengage_emo, cope_restraint, cope_socialsupp_emo, cope_acccept, cope_suppression, cope_planning)
glimpse(coping)
ggplot(cleaned_insomnia, aes(x = ISI_total)) +
geom_line(aes(y = BDI_total), color = "red", linetype = "solid") +
geom_line(aes(y = ASHS_total), color = "blue", linetype = "dashed") +
geom_line(aes(y = FIRST_total), color = "green", linetype = "dotted") +
labs(x = "X Variable", y = "Y Variables") +
ggtitle("Multiple-Line Plot of Y Variables against X")
runApp('shiny_smoother')
install.packages("ggExtra")
runApp('shiny_smoother')
install.packages("bslib")
install.packages("bslib")
shiny::runApp('shiny_smoother')
runApp('combined_app')
runApp('combined_app')
runApp('combined_app')
shiny::runApp('combined_app')
runApp('shiny_smoother')
knitr::opts_chunk$set(echo = TRUE)
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Sort the data by rank
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Sort the data by rank
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items", x = "Items", y = "Rank")
ggplot(ranking_data, aes(x = Rank, y = Item)) +
geom_point(size = 3, color = "steelblue") +
labs(title = "Ranking of Items", x = "Rank", y = "Items")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Sort the data by rank
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Sort the data by rank in ascending order
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items (Ascending Order)", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Sort the data by rank
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Convert Rank to numeric
ranking_data$Rank <- as.numeric(ranking_data$Rank)
# Sort the data by rank in ascending order
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items (Ascending Order)", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Convert Rank to numeric
ranking_data$Rank <- as.numeric(ranking_data$Rank)
# Sort the data by rank in ascending order
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items (Ascending Order)", x = "Items", y = "Rank")
# Sample data
items <- c("Item A", "Item B", "Item C", "Item D")
ranks <- c(1, 3, 2, 4)
# Create a data frame
ranking_data <- data.frame(Item = items, Rank = ranks)
# Convert Rank to numeric
ranking_data$Rank <- as.numeric(ranking_data$Rank)
# Sort the data by rank in ascending order
ranking_data <- ranking_data[order(ranking_data$Rank), ]
# Create a bar plot
library(ggplot2)
ggplot(ranking_data, aes(x = Item, y = Rank)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Ranking of Items (Ascending Order)", x = "Items", y = "Rank")
knitr::opts_chunk$set(echo = TRUE)
sleephyg <- as.numeric(cleaned_insomnia$ASHS_total)
print(mean(sleephyg))
dysfuncbelief <- as.numeric(cleaned_insomnia$DBAS_total)
print(mean(dysfuncbelief))
stress_home <- as.numeric(cleaned_insomnia$asq_home)
print(mean(stress_home))
stress_school <- as.numeric(cleaned_insomnia$asq_school)
print(mean(stress_school))
stress_attendance <- as.numeric(cleaned_insomnia$asq_attendance)
print(mean(stress_attendance))
stress_romantic <- as.numeric(cleaned_insomnia$asq_romantic)
print(mean(stress_romantic))
stress_peer <- as.numeric(cleaned_insomnia$asq_peer)
print(mean(stress_peer))
stress_teacher <- as.numeric(cleaned_insomnia$asq_teacher)
print(mean(stress_teacher))
stress_future <- as.numeric(cleaned_insomnia$asq_future)
print(mean(stress_future))
stress_leisure <- as.numeric(cleaned_insomnia$asq_leisure)
print(mean(stress_leisure))
stress_finance <- as.numeric(cleaned_insomnia$asq_finance)
print(mean(stress_finance))
stress_responsibility <- as.numeric(cleaned_insomnia$asq_responsibility)
print(mean(stress_responsibility))
totsinvent <- as.numeric(cleaned_insomnia$GCTI_total)
print(mean(totsinvent))
runApp('age_gender')
install.packages("wordcloud2")
runApp('wordcloud')
runApp('wordcloud')
install.packages("tm")
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('age_gender')
runApp('age_gender')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('age_gender')
runApp('age_gender')
runApp('wordcloud')
runApp('age_gender')
runApp('wordcloud')
runApp('age_gender')
library(shiny)
library(ggplot2)
library(bslib)
insomnia_uncleaned <-read.csv("insomnia.csv")
#data cleaning
insomnia <- insomnia_uncleaned %>% # <-- pipe operator
select(Sex, Age, ISI_total, BDI_total, ASHS_total, ASHS_physiological, ASHS_cognitive,ASHS_emotional, ASHS_SleepEnvirnmont, ASHS_DaytimeSleep, ASHS_substances, ASHS_bedtimeRoutine, ASHS_sleepStability, ASHS_BedroomSharing, DBAS_total, FIRST_total, GCTI_total, ACE_tot, asq_home, asq_school, asq_attendance, asq_romantic, asq_peer, asq_teacher, asq_future, asq_leisure, asq_finance, asq_responsibility, cope_disengage_su, cope_growth, cope_disengage_mental, cope_emotions, cope_socialsupp_instr, cope_active, cope_denial, cope_religion, cope_humor, cope_disengage_emo, cope_restraint, cope_socialsupp_emo, cope_acccept, cope_suppression, cope_planning)
cleaned_insomnia <- na.omit(insomnia)
cleaned_insomnia$Sex <- factor(cleaned_insomnia$Sex, levels = c(0, 1), labels = c("Female", "Male"))
# Function to create a plot
create_plot <- function(data, x_var, y_var, title) {
ggplot(data, aes_string(x = x_var, y = y_var)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") +
labs(x = x_var, y = "Insomnia severity") +
ggtitle(title) +
theme_minimal()
}
# Define UI
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "minty"),
titlePanel("Choose a causal factor to see how it correlates with insomnia"),
sidebarLayout(
sidebarPanel(
radioButtons("plotSelection", "Select Plot:",
choices = c("Depression", "Sleep hygiene", "Predisposition to insomnia", "Dysfunctional beliefs", "Cognitive intrusiveness"),
selected = "Depression")
),
mainPanel(
plotOutput("selectedPlot")
)
)
)
# Define server
server <- function(input, output) {
output$selectedPlot <- renderPlot({
selected_plot <- input$plotSelection
if (selected_plot == "Depression") {
p <- create_plot(cleaned_insomnia, "BDI_total", "ISI_total", "Insomnia severity against Depression")
} else if (selected_plot == "Sleep hygiene") {
p <- create_plot(cleaned_insomnia, "ASHS_total", "ISI_total", "Insomnia severity against Sleep hygiene")
} else if (selected_plot == "Predisposition to insomnia") {
p <- create_plot(cleaned_insomnia, "FIRST_total", "ISI_total", "Insomnia severity against Predisposition to insomnia")
} else if (selected_plot == "Dysfunctional beliefs") {
p <- create_plot(cleaned_insomnia, "DBAS_total", "ISI_total", "Insomnia severity against Dysfunctional beliefs")
} else if (selected_plot == "Cognitive intrusiveness") {
p <- create_plot(cleaned_insomnia, "GCTI_total", "ISI_total", "Insomnia severity against Cognitive intrusiveness")
}
print(p)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(bslib)
insomnia_uncleaned <-read.csv("insomnia.csv")
#data cleaning
insomnia <- insomnia_uncleaned %>% # <-- pipe operator
select(Sex, Age, ISI_total, BDI_total, ASHS_total, ASHS_physiological, ASHS_cognitive,ASHS_emotional, ASHS_SleepEnvirnmont, ASHS_DaytimeSleep, ASHS_substances, ASHS_bedtimeRoutine, ASHS_sleepStability, ASHS_BedroomSharing, DBAS_total, FIRST_total, GCTI_total, ACE_tot, asq_home, asq_school, asq_attendance, asq_romantic, asq_peer, asq_teacher, asq_future, asq_leisure, asq_finance, asq_responsibility, cope_disengage_su, cope_growth, cope_disengage_mental, cope_emotions, cope_socialsupp_instr, cope_active, cope_denial, cope_religion, cope_humor, cope_disengage_emo, cope_restraint, cope_socialsupp_emo, cope_acccept, cope_suppression, cope_planning)
library(tidyverse)
insomnia_uncleaned <-read.csv("insomnia.csv")
#data cleaning
insomnia <- insomnia_uncleaned %>% # <-- pipe operator
select(Sex, Age, ISI_total, BDI_total, ASHS_total, ASHS_physiological, ASHS_cognitive,ASHS_emotional, ASHS_SleepEnvirnmont, ASHS_DaytimeSleep, ASHS_substances, ASHS_bedtimeRoutine, ASHS_sleepStability, ASHS_BedroomSharing, DBAS_total, FIRST_total, GCTI_total, ACE_tot, asq_home, asq_school, asq_attendance, asq_romantic, asq_peer, asq_teacher, asq_future, asq_leisure, asq_finance, asq_responsibility, cope_disengage_su, cope_growth, cope_disengage_mental, cope_emotions, cope_socialsupp_instr, cope_active, cope_denial, cope_religion, cope_humor, cope_disengage_emo, cope_restraint, cope_socialsupp_emo, cope_acccept, cope_suppression, cope_planning)
cleaned_insomnia <- na.omit(insomnia)
cleaned_insomnia$Sex <- factor(cleaned_insomnia$Sex, levels = c(0, 1), labels = c("Female", "Male"))
# Function to create a plot
create_plot <- function(data, x_var, y_var, title) {
ggplot(data, aes_string(x = x_var, y = y_var)) +
geom_point() +
geom_point(color = "#0077B6") +
geom_smooth(method = "lm", se = FALSE, color = "#FF6F61") +
labs(x = x_var, y = "Insomnia severity") +
ggtitle(title) +
theme_minimal()
}
# Define UI
ui <- fluidPage(
theme = bs_theme(version = 4, bootswatch = "minty"),
titlePanel("Choose a causal factor to see how it correlates with insomnia"),
sidebarLayout(
sidebarPanel(
radioButtons("plotSelection", "Select Plot:",
choices = c("Depression", "Sleep hygiene", "Predisposition to insomnia", "Dysfunctional beliefs", "Cognitive intrusiveness"),
selected = "Depression")
),
mainPanel(
plotOutput("selectedPlot")
)
)
)
shiny::runApp('wordcloud')
install.packages(stringr)
install.packages("stringr")
install.packages("stringr")
shiny::runApp('improved_causes')
runApp('improved_causes')
install.packages("tools")
install.packages("tools")
install.packages("tools")
shiny::runApp('improved_causes')
runApp('improved_causes')
runApp('improved_causes')
runApp('wordcloud')
runApp('improved_causes')
runApp('improved_causes')
runApp('improved_causes')
runApp('wordcloud')
runApp('improved_causes')
runApp('improved_causes')
runApp('improved_causes')
runApp('improved_causes')
runApp('improved_causes')
runApp('wordcloud')
runApp('wordcloud')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('age_gender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('age_gender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('age_gender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('wordcloud')
runApp('improved_agegender')
runApp('improved_agegender')
runApp('age_gender')
